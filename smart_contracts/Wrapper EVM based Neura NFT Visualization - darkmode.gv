digraph G {
  graph [ratio="auto", page="100", compound=true, bgcolor="#0d0d1c"];
  node [style="filled", fillcolor="#2E2E38", color="#2E2E38", penwidth=3, fontcolor="white"];
  edge [color="#FFFFFF", penwidth=2, fontname="Helvetica", fontcolor="white"];

  subgraph "clusterCollectionContract" {
    graph [label="CollectionContract", color="#33334C", fontcolor="white", style="rounded", bgcolor="#33334C"];
    "CollectionContract.<Constructor>" [label="<Constructor>", fillcolor="#4E79A7", fontcolor="white"];
    "CollectionContract.onlyAuthorized" [label="onlyAuthorized", fillcolor="#59A14F", fontcolor="white", shape=doubleoctagon];
    "CollectionContract.onlyCollectionOwner" [label="onlyCollectionOwner", fillcolor="#59A14F", fontcolor="white", shape=doubleoctagon];
    "CollectionContract.createCollection" [label="createCollection", fillcolor="#F28E2B", fontcolor="white"];
    "CollectionContract.updateCollection" [label="updateCollection", fillcolor="#F28E2B", fontcolor="white"];
    "CollectionContract.transferCollection" [label="transferCollection", fillcolor="#F28E2B", fontcolor="white"];
    "CollectionContract.getCollectionMetadata" [label="getCollectionMetadata", fillcolor="#F28E2B", fontcolor="white"];
    "CollectionContract.getCollectionOwner" [label="getCollectionOwner", fillcolor="#F28E2B", fontcolor="white"];
    "CollectionContract.getTotalCollections" [label="getTotalCollections", fillcolor="#F28E2B", fontcolor="white"];
    "CollectionContract.getAllCollections" [label="getAllCollections", fillcolor="#F28E2B", fontcolor="white"];
    "CollectionContract.getCollectionNFTCount" [label="getCollectionNFTCount", fillcolor="#F28E2B", fontcolor="white"];
    "CollectionContract.getCollectionUniqueHolders" [label="getCollectionUniqueHolders", fillcolor="#F28E2B", fontcolor="white"];

    "CollectionContract.collections" [label="collections\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "CollectionContract.collectionOwners" [label="collectionOwners\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "CollectionContract.totalCollections" [label="totalCollections\n(uint256)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
  }

  subgraph "clusterMasterAccessControl" {
    graph [label="MasterAccessControl", color="#33334C", fontcolor="white", style="rounded", bgcolor="#33334C"];
    "MasterAccessControl.grantSelfAccess" [label="grantSelfAccess", fillcolor="#F28E2B", fontcolor="white"];
    "MasterAccessControl.selfCheckAccess" [label="selfCheckAccess", fillcolor="#F28E2B", fontcolor="white"];
    "MasterAccessControl.onlyAuthorized" [label="onlyAuthorized", fillcolor="#59A14F", fontcolor="white", shape=doubleoctagon];
    "MasterAccessControl.<Constructor>" [label="<Constructor>", fillcolor="#4E79A7", fontcolor="white"];
    "MasterAccessControl.grantAccess" [label="grantAccess", fillcolor="#F28E2B", fontcolor="white"];
    "MasterAccessControl.revokeAccess" [label="revokeAccess", fillcolor="#F28E2B", fontcolor="white"];
    "MasterAccessControl.revokeSelfAccess" [label="revokeSelfAccess", fillcolor="#F28E2B", fontcolor="white"];
    "MasterAccessControl.hasAccess" [label="hasAccess", fillcolor="#4E79A7", fontcolor="white"];

    "MasterAccessControl.accessRights" [label="accessRights\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
  }

  subgraph "clusterERC721Collection" {
    graph [label="ERC721Collection", color="#33334C", fontcolor="white", style="rounded", bgcolor="#33334C"];
    "ERC721Collection.balanceOf" [label="balanceOf", fillcolor="#4E79A7", fontcolor="white"];
    "ERC721Collection.balanceOfCollection" [label="balanceOfCollection", fillcolor="#4E79A7", fontcolor="white"];
    "ERC721Collection.ownerOf" [label="ownerOf", fillcolor="#4E79A7", fontcolor="white"];
    "ERC721Collection.safeTransferFrom" [label="safeTransferFrom", fillcolor="#4E79A7", fontcolor="white"];
    "ERC721Collection.transferFrom" [label="transferFrom", fillcolor="#4E79A7", fontcolor="white"];
    "ERC721Collection.approve" [label="approve", fillcolor="#4E79A7", fontcolor="white"];
    "ERC721Collection.setApprovalForAll" [label="setApprovalForAll", fillcolor="#4E79A7", fontcolor="white"];
    "ERC721Collection.getApproved" [label="getApproved", fillcolor="#4E79A7", fontcolor="white"];
    "ERC721Collection.isApprovedForAll" [label="isApprovedForAll", fillcolor="#4E79A7", fontcolor="white"];
  }

  subgraph "clusterNFTContract" {
    graph [label="NFTContract", color="#33334C", fontcolor="white", style="rounded", bgcolor="#33334C"];
    "NFTContract.getCollectionNFTCount" [label="getCollectionNFTCount", fillcolor="#F28E2B", fontcolor="white"];
    "NFTContract.numberOfHolders" [label="numberOfHolders", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract.<Constructor>" [label="<Constructor>", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract.onlyAuthorized" [label="onlyAuthorized", fillcolor="#59A14F", fontcolor="white", shape=doubleoctagon];
    "NFTContract.onlyNFTOwner" [label="onlyNFTOwner", fillcolor="#59A14F", fontcolor="white", shape=doubleoctagon];
    "NFTContract.createNFT" [label="createNFT", fillcolor="#F28E2B", fontcolor="white"];
    "NFTContract.burnNFT" [label="burnNFT", fillcolor="#F28E2B", fontcolor="white"];
    "NFTContract.transferNFT" [label="transferNFT", fillcolor="#F28E2B", fontcolor="white"];
    "NFTContract.getNFTInfo" [label="getNFTInfo", fillcolor="#F28E2B", fontcolor="white"];
    "NFTContract.getCollectionNFTs" [label="getCollectionNFTs", fillcolor="#F28E2B", fontcolor="white"];
    "NFTContract.balanceOf" [label="balanceOf", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract.balanceOfCollection" [label="balanceOfCollection", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract.ownerOf" [label="ownerOf", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract.safeTransferFrom" [label="safeTransferFrom", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract.transferFrom" [label="transferFrom", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract.approve" [label="approve", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract.setApprovalForAll" [label="setApprovalForAll", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract.getApproved" [label="getApproved", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract.isApprovedForAll" [label="isApprovedForAll", fillcolor="#4E79A7", fontcolor="white"];
    "NFTContract._exists" [label="_exists", fillcolor="#E15759", fontcolor="white"];
    "NFTContract._isApprovedOrOwner" [label="_isApprovedOrOwner", fillcolor="#E15759", fontcolor="white"];
    "NFTContract._transfer" [label="_transfer", fillcolor="#E15759", fontcolor="white"];
    "NFTContract._checkOnERC721Received" [label="_checkOnERC721Received", fillcolor="#2E2E38", fontcolor="white"];

    "NFTContract.nfts" [label="nfts\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTContract.collectionNFTCount" [label="collectionNFTCount\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTContract.balances" [label="balances\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTContract.balanceCollection" [label="balanceCollection\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTContract.tokenApprovals" [label="tokenApprovals\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTContract.operatorApprovals" [label="operatorApprovals\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTContract.nextTokenId" [label="nextTokenId\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
  }

  subgraph "clusterIERC721Receiver" {
    graph [label="IERC721Receiver (iface)", color="#33334C", fontcolor="white", style="rounded", bgcolor="#33334C"];
    "IERC721Receiver.onERC721Received" [label="onERC721Received", fillcolor="#F28E2B", fontcolor="white"];
  }

  subgraph "clusterNFTAccessControl" {
    graph [label="NFTAccessControl", color="#33334C", fontcolor="white", style="rounded", bgcolor="#33334C"];
    "NFTAccessControl.grantAccess" [label="grantAccess", fillcolor="#F28E2B", fontcolor="white"];
    "NFTAccessControl.revokeAccess" [label="revokeAccess", fillcolor="#F28E2B", fontcolor="white"];
    "NFTAccessControl.getAccessLevel" [label="getAccessLevel", fillcolor="#F28E2B", fontcolor="white"];
    "NFTAccessControl.<Constructor>" [label="<Constructor>", fillcolor="#4E79A7", fontcolor="white"];
    "NFTAccessControl.onlyAuthorized" [label="onlyAuthorized", fillcolor="#59A14F", fontcolor="white", shape=doubleoctagon];
    "NFTAccessControl.onlyAuthorizedOrOwner" [label="onlyAuthorizedOrOwner", fillcolor="#59A14F", fontcolor="white", shape=doubleoctagon];
    "NFTAccessControl.maxAccessLevelCheck" [label="maxAccessLevelCheck", fillcolor="#59A14F", fontcolor="white", shape=doubleoctagon];
    "NFTAccessControl.setMaxAccessLevel" [label="setMaxAccessLevel", fillcolor="#F28E2B", fontcolor="white"];
    "NFTAccessControl.setDefaultAccessLevel" [label="setDefaultAccessLevel", fillcolor="#F28E2B", fontcolor="white"];
    "NFTAccessControl._updateUserAccessList" [label="_updateUserAccessList", fillcolor="#E15759", fontcolor="white"];
    "NFTAccessControl._updateNFTAccessList" [label="_updateNFTAccessList", fillcolor="#E15759", fontcolor="white"];
    "NFTAccessControl._updateUserAccessListOnRevoke" [label="_updateUserAccessListOnRevoke", fillcolor="#E15759", fontcolor="white"];
    "NFTAccessControl._updateNFTAccessListOnRevoke" [label="_updateNFTAccessListOnRevoke", fillcolor="#E15759", fontcolor="white"];
    "NFTAccessControl.getAllAccessForUser" [label="getAllAccessForUser", fillcolor="#F28E2B", fontcolor="white"];
    "NFTAccessControl.checkMinimumAccess" [label="checkMinimumAccess", fillcolor="#F28E2B", fontcolor="white"];
    "NFTAccessControl.getAllUsersAccessForNFT" [label="getAllUsersAccessForNFT", fillcolor="#F28E2B", fontcolor="white"];

    "NFTAccessControl.nftAccess" [label="nftAccess\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTAccessControl.defaultAccessLevel" [label="defaultAccessLevel\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTAccessControl.maxAccessLevel" [label="maxAccessLevel\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTAccessControl.userAccess" [label="userAccess\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTAccessControl.userAccessList" [label="userAccessList\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTAccessControl.userAccessIndex" [label="userAccessIndex\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTAccessControl.nftAccessList" [label="nftAccessList\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTAccessControl.nftAccessIndex" [label="nftAccessIndex\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
  }

  subgraph "clusterNFTMetadata" {
    graph [label="NFTMetadata", color="#33334C", fontcolor="white", style="rounded", bgcolor="#33334C"];
    "NFTMetadata.metadataExists" [label="metadataExists", fillcolor="#F28E2B", fontcolor="white"];
    "NFTMetadata.deleteMetadata" [label="deleteMetadata", fillcolor="#F28E2B", fontcolor="white"];
    "NFTMetadata.<Constructor>" [label="<Constructor>", fillcolor="#4E79A7", fontcolor="white"];
    "NFTMetadata.onlyAuthorized" [label="onlyAuthorized", fillcolor="#59A14F", fontcolor="white", shape=doubleoctagon];
    "NFTMetadata.onlyAuthorizedEditData" [label="onlyAuthorizedEditData", fillcolor="#59A14F", fontcolor="white", shape=doubleoctagon];
    "NFTMetadata.createMetadata" [label="createMetadata", fillcolor="#4E79A7", fontcolor="white"];
    "NFTMetadata.replicateNFT" [label="replicateNFT", fillcolor="#F28E2B", fontcolor="white"];
    "NFTMetadata.updateMetadata" [label="updateMetadata", fillcolor="#F28E2B", fontcolor="white"];
    "NFTMetadata.getMetadata" [label="getMetadata", fillcolor="#F28E2B", fontcolor="white"];
    "NFTMetadata._metadataExists" [label="_metadataExists", fillcolor="#E15759", fontcolor="white"];

    "NFTMetadata.metadataMap" [label="metadataMap\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
    "NFTMetadata.replicaMap" [label="replicaMap\n(mapping)", shape="rectangle", fillcolor="#76B7B2", fontcolor="white"];
  }

   // ---------------------------- Function Calls ---------------------------- //

  // Edges for function calls
  "CollectionContract.<Constructor>";
  "MasterAccessControl.grantSelfAccess";
  "CollectionContract.onlyAuthorized";
  "MasterAccessControl.selfCheckAccess";
  "CollectionContract.getCollectionNFTCount";
  "NFTContract.getCollectionNFTCount";
  "CollectionContract.getCollectionUniqueHolders";
  "NFTContract.numberOfHolders";
  "MasterAccessControl.onlyAuthorized";
  "MasterAccessControl.hasAccess";
  "NFTContract.<Constructor>";
  "NFTContract.onlyAuthorized";
  "NFTContract.createNFT";
  "NFTAccessControl.grantAccess";
  "NFTContract.burnNFT";
  "NFTMetadata.metadataExists";
  "NFTMetadata.deleteMetadata";
  "NFTAccessControl.revokeAccess";
  "NFTContract.transferNFT";
  "NFTContract.safeTransferFrom";
  "NFTContract.transferFrom";
  "NFTContract._checkOnERC721Received";
  "NFTContract._isApprovedOrOwner";
  "NFTContract._transfer";
  "NFTContract.approve";
  "NFTContract.ownerOf";
  "NFTContract.isApprovedForAll";
  "NFTContract.getApproved";
  "NFTContract._exists";
  "NFTAccessControl.getAccessLevel";
  "NFTAccessControl.<Constructor>";
  "NFTAccessControl.onlyAuthorized";
  "NFTAccessControl.onlyAuthorizedOrOwner";
  "NFTAccessControl._updateUserAccessList";
  "NFTAccessControl._updateNFTAccessList";
  "NFTAccessControl._updateUserAccessListOnRevoke";
  "NFTAccessControl._updateNFTAccessListOnRevoke";
  "NFTMetadata.<Constructor>";
  "NFTMetadata.onlyAuthorized";
  "NFTMetadata.onlyAuthorizedEditData";
  "NFTAccessControl.checkMinimumAccess";
  "NFTMetadata.replicateNFT";
  "NFTMetadata._metadataExists";
  "NFTMetadata.createMetadata";
  "NFTMetadata.updateMetadata";
  "NFTMetadata.getMetadata";

  // ---------------------------- Data Variables ---------------------------- //

  "CollectionContract.collections";
  "CollectionContract.collectionOwners";
  "CollectionContract.totalCollections";
  "MasterAccessControl.accessRights";
  "NFTContract.nfts";
  "NFTContract.collectionNFTCount";
  "NFTContract.balances";
  "NFTContract.balanceCollection";
  "NFTContract.tokenApprovals";
  "NFTContract.operatorApprovals";
  "NFTContract.nextTokenId";
  "NFTAccessControl.nftAccess";
  "NFTAccessControl.defaultAccessLevel";
  "NFTAccessControl.maxAccessLevel";
  "NFTAccessControl.userAccess";
  "NFTAccessControl.userAccessList";
  "NFTAccessControl.userAccessIndex";
  "NFTAccessControl.nftAccessList";
  "NFTAccessControl.nftAccessIndex";
  "NFTMetadata.metadataMap";
  "NFTMetadata.replicaMap";

  // ---------------------------- Data Call Flow ---------------------------- //

  // CollectionContract
  "CollectionContract.createCollection" -> "CollectionContract.collections" [color="#59A14F"];
  "CollectionContract.createCollection" -> "CollectionContract.collectionOwners" [color="#59A14F"];
  "CollectionContract.createCollection" -> "CollectionContract.totalCollections" [color="#59A14F"];
  "CollectionContract.collections" -> "CollectionContract.getCollectionMetadata" [color="blue"];
  "CollectionContract.collectionOwners" -> "CollectionContract.getCollectionOwner" [color="blue"];
  "CollectionContract.totalCollections" -> "CollectionContract.getTotalCollections" [color="blue"];
  "CollectionContract.collections" -> "CollectionContract.getAllCollections" [color="blue"];
  "CollectionContract.updateCollection" -> "CollectionContract.collections" [color="#59A14F"];
  "CollectionContract.transferCollection" -> "CollectionContract.collectionOwners" [color="#59A14F"];

  // MasterAccessControl
  "MasterAccessControl.grantAccess" -> "MasterAccessControl.accessRights" [color="#59A14F"];
  "MasterAccessControl.revokeAccess" -> "MasterAccessControl.accessRights" [color="#59A14F"];
  "MasterAccessControl.accessRights" -> "MasterAccessControl.hasAccess" [color="blue"];
  "MasterAccessControl.accessRights" -> "MasterAccessControl.selfCheckAccess" [color="blue"];

  // NFTContract
  "NFTContract.createNFT" -> "NFTContract.nfts" [color="#59A14F"];
  "NFTContract.createNFT" -> "NFTContract.collectionNFTCount" [color="#59A14F"];
  "NFTContract.createNFT" -> "NFTContract.balances" [color="#59A14F"];
  "NFTContract.createNFT" -> "NFTContract.balanceCollection" [color="#59A14F"];
  "NFTContract.createNFT" -> "NFTContract.nextTokenId" [color="#59A14F"];
  "NFTContract.burnNFT" -> "NFTContract.nfts" [color="#59A14F"];
  "NFTContract.burnNFT" -> "NFTContract.collectionNFTCount" [color="#59A14F"];
  "NFTContract.burnNFT" -> "NFTContract.balances" [color="#59A14F"];
  "NFTContract.burnNFT" -> "NFTContract.balanceCollection" [color="#59A14F"];
  "NFTContract.nfts" -> "NFTContract.getNFTInfo" [color="blue"];
  "NFTContract.collectionNFTCount" -> "NFTContract.getCollectionNFTCount" [color="blue"];
  "NFTContract.balances" -> "NFTContract.balanceOf" [color="blue"];
  "NFTContract.balanceCollection" -> "NFTContract.balanceOfCollection" [color="blue"];
  "NFTContract.nfts" -> "NFTContract.ownerOf" [color="blue"];
  "NFTContract._transfer" -> "NFTContract.nfts" [color="#59A14F"];
  "NFTContract._transfer" -> "NFTContract.balances" [color="#59A14F"];
  "NFTContract._transfer" -> "NFTContract.balanceCollection" [color="#59A14F"];
  "NFTContract.approve" -> "NFTContract.tokenApprovals" [color="#59A14F"];
  "NFTContract.setApprovalForAll" -> "NFTContract.operatorApprovals" [color="#59A14F"];
  "NFTContract.tokenApprovals" -> "NFTContract.getApproved" [color="blue"];
  "NFTContract.operatorApprovals" -> "NFTContract.isApprovedForAll" [color="blue"];

  // NFTAccessControl
  "NFTAccessControl.grantAccess" -> "NFTAccessControl.nftAccess" [color="#59A14F"];
  "NFTAccessControl.grantAccess" -> "NFTAccessControl.userAccess" [color="#59A14F"];
  "NFTAccessControl.revokeAccess" -> "NFTAccessControl.nftAccess" [color="#59A14F"];
  "NFTAccessControl.revokeAccess" -> "NFTAccessControl.userAccess" [color="#59A14F"];
  "NFTAccessControl.nftAccess" -> "NFTAccessControl.getAccessLevel" [color="blue"];
  "NFTAccessControl.defaultAccessLevel" -> "NFTAccessControl.getAccessLevel" [color="blue"];
  "NFTAccessControl.setMaxAccessLevel" -> "NFTAccessControl.maxAccessLevel" [color="#59A14F"];
  "NFTAccessControl.setDefaultAccessLevel" -> "NFTAccessControl.defaultAccessLevel" [color="#59A14F"];
  "NFTAccessControl.userAccessList" -> "NFTAccessControl.getAllAccessForUser" [color="blue"];
  "NFTAccessControl.nftAccess" -> "NFTAccessControl.checkMinimumAccess" [color="blue"];
  "NFTAccessControl.defaultAccessLevel" -> "NFTAccessControl.checkMinimumAccess" [color="blue"];
  "NFTAccessControl.nftAccessList" -> "NFTAccessControl.getAllUsersAccessForNFT" [color="blue"];

  // NFTMetadata
  "NFTMetadata.createMetadata" -> "NFTMetadata.metadataMap" [color="#59A14F"];
  "NFTMetadata.replicateNFT" -> "NFTMetadata.metadataMap" [color="#59A14F"];
  "NFTMetadata.replicateNFT" -> "NFTMetadata.replicaMap" [color="#59A14F"];
  "NFTMetadata.updateMetadata" -> "NFTMetadata.metadataMap" [color="#59A14F"];
  "NFTMetadata.deleteMetadata" -> "NFTMetadata.metadataMap" [color="#59A14F"];
  "NFTMetadata.metadataMap" -> "NFTMetadata.getMetadata" [color="blue"];
  "NFTMetadata.metadataMap" -> "NFTMetadata._metadataExists" [color="blue"];
  "NFTMetadata.metadataMap" -> "NFTMetadata.metadataExists" [color="blue"];

  // ---------------------------- Function Flow ---------------------------- //

  "CollectionContract.<Constructor>" -> "MasterAccessControl.grantSelfAccess" [color="white"];
  "CollectionContract.onlyAuthorized" -> "MasterAccessControl.selfCheckAccess" [color="white"];
  "CollectionContract.getCollectionNFTCount" -> "NFTContract.getCollectionNFTCount" [color="white"];
  "CollectionContract.getCollectionUniqueHolders" -> "NFTContract.numberOfHolders" [color="white"];
  "MasterAccessControl.onlyAuthorized" -> "MasterAccessControl.hasAccess" [color="#40e7c8"];
  "NFTContract.<Constructor>" -> "MasterAccessControl.grantSelfAccess" [color="white"];
  "NFTContract.onlyAuthorized" -> "MasterAccessControl.selfCheckAccess" [color="white"];
  "NFTContract.createNFT" -> "NFTAccessControl.grantAccess" [color="white"];
  "NFTContract.burnNFT" -> "NFTMetadata.metadataExists" [color="white"];
  "NFTContract.burnNFT" -> "NFTMetadata.deleteMetadata" [color="white"];
  "NFTContract.burnNFT" -> "NFTAccessControl.revokeAccess" [color="white"];
  "NFTContract.transferNFT" -> "NFTContract.safeTransferFrom" [color="#40e7c8"];
  "NFTContract.safeTransferFrom" -> "NFTContract.transferFrom" [color="#40e7c8"];
  "NFTContract.safeTransferFrom" -> "NFTContract._checkOnERC721Received" [color="#40e7c8"];
  "NFTContract.safeTransferFrom" -> "NFTContract.safeTransferFrom" [color="#40e7c8"];
  "NFTContract.transferFrom" -> "NFTContract._isApprovedOrOwner" [color="#40e7c8"];
  "NFTContract.transferFrom" -> "NFTContract._transfer" [color="#40e7c8"];
  "NFTContract.approve" -> "NFTContract.ownerOf" [color="#40e7c8"];
  "NFTContract.approve" -> "NFTContract.isApprovedForAll" [color="#40e7c8"];
  "NFTContract.getApproved" -> "NFTContract._exists" [color="#40e7c8"];
  "NFTContract._isApprovedOrOwner" -> "NFTContract.ownerOf" [color="#40e7c8"];
  "NFTContract._isApprovedOrOwner" -> "NFTContract.getApproved" [color="#40e7c8"];
  "NFTContract._isApprovedOrOwner" -> "NFTContract.isApprovedForAll" [color="#40e7c8"];
  "NFTContract._transfer" -> "NFTContract.ownerOf" [color="#40e7c8"];
  "NFTContract._transfer" -> "NFTContract.approve" [color="#40e7c8"];
  "NFTContract._transfer" -> "NFTAccessControl.getAccessLevel" [color="white"];
  "NFTContract._transfer" -> "NFTAccessControl.revokeAccess" [color="white"];
  "NFTContract._transfer" -> "NFTAccessControl.grantAccess" [color="white"];
  "NFTAccessControl.<Constructor>" -> "MasterAccessControl.grantSelfAccess" [color="white"];
  "NFTAccessControl.onlyAuthorized" -> "MasterAccessControl.selfCheckAccess" [color="white"];
  "NFTAccessControl.onlyAuthorizedOrOwner" -> "MasterAccessControl.selfCheckAccess" [color="white"];
  "NFTAccessControl.grantAccess" -> "NFTAccessControl._updateUserAccessList" [color="#40e7c8"];
  "NFTAccessControl.grantAccess" -> "NFTAccessControl._updateNFTAccessList" [color="#40e7c8"];
  "NFTAccessControl.revokeAccess" -> "NFTAccessControl._updateUserAccessListOnRevoke" [color="#40e7c8"];
  "NFTAccessControl.revokeAccess" -> "NFTAccessControl._updateNFTAccessListOnRevoke" [color="#40e7c8"];
  "NFTMetadata.<Constructor>" -> "MasterAccessControl.grantSelfAccess" [color="white"];
  "NFTMetadata.onlyAuthorized" -> "MasterAccessControl.selfCheckAccess" [color="white"];
  "NFTMetadata.onlyAuthorizedEditData" -> "NFTAccessControl.checkMinimumAccess" [color="white"];
  "NFTMetadata.onlyAuthorizedEditData" -> "MasterAccessControl.selfCheckAccess" [color="white"];
  "NFTMetadata.replicateNFT" -> "NFTMetadata._metadataExists" [color="#40e7c8"];
  "NFTMetadata.replicateNFT" -> "NFTMetadata.createMetadata" [color="#40e7c8"];
  "NFTMetadata.updateMetadata" -> "NFTMetadata._metadataExists" [color="#40e7c8"];
  "NFTMetadata.deleteMetadata" -> "NFTMetadata._metadataExists" [color="#40e7c8"];
  "NFTMetadata.getMetadata" -> "NFTMetadata._metadataExists" [color="#40e7c8"];
  "NFTMetadata.metadataExists" -> "NFTMetadata._metadataExists" [color="#40e7c8"];





// Define ERC721Collection interface functions
"ERC721Collection.balanceOf";
"ERC721Collection.balanceOfCollection";
"ERC721Collection.ownerOf";
"ERC721Collection.safeTransferFrom";
"ERC721Collection.transferFrom";
"ERC721Collection.approve";
"ERC721Collection.setApprovalForAll";
"ERC721Collection.getApproved";
"ERC721Collection.isApprovedForAll";

// Connect ERC721Collection to NFTContract (inheritance)
"ERC721Collection.balanceOf" -> "NFTContract.balanceOf" [color="#d2c6d7", style="dashed"];
"ERC721Collection.balanceOfCollection" -> "NFTContract.balanceOfCollection" [color="#d2c6d7", style="dashed"];
"ERC721Collection.ownerOf" -> "NFTContract.ownerOf" [color="#d2c6d7", style="dashed"];
"ERC721Collection.safeTransferFrom" -> "NFTContract.safeTransferFrom" [color="#d2c6d7", style="dashed"];
"ERC721Collection.transferFrom" -> "NFTContract.transferFrom" [color="#d2c6d7", style="dashed"];
"ERC721Collection.approve" -> "NFTContract.approve" [color="#d2c6d7", style="dashed"];
"ERC721Collection.setApprovalForAll" -> "NFTContract.setApprovalForAll" [color="#d2c6d7", style="dashed"];
"ERC721Collection.getApproved" -> "NFTContract.getApproved" [color="#d2c6d7", style="dashed"];
"ERC721Collection.isApprovedForAll" -> "NFTContract.isApprovedForAll" [color="#d2c6d7", style="dashed"];






rankdir=LR
subgraph cluster_legend {
  label="Legend";
  fontsize=20;
  node [shape=plaintext];
  
  legend [label=<
    <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
      <TR><TD COLSPAN="2"><B>Legend</B></TD></TR>
      <TR>
        <TD BGCOLOR="#4E79A7">&nbsp;&nbsp;&nbsp;</TD>
        <TD>Constructor</TD>
      </TR>
      <TR>
        <TD BGCOLOR="#59A14F">&nbsp;&nbsp;&nbsp;</TD>
        <TD>Modifier</TD>
      </TR>
      <TR>
        <TD BGCOLOR="#F28E2B">&nbsp;&nbsp;&nbsp;</TD>
        <TD>Function</TD>
      </TR>
      <TR>
        <TD BGCOLOR="#E15759">&nbsp;&nbsp;&nbsp;</TD>
        <TD>Internal Function</TD>
      </TR>
      <TR>
        <TD BGCOLOR="#76B7B2">&nbsp;&nbsp;&nbsp;</TD>
        <TD>Data Variable</TD>
      </TR>
    </TABLE>
  >];
}





  rankdir=LR
  node [shape=plaintext]
  subgraph cluster_01 {
    label = "Legend";
  key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
    <tr><td align="right" port="i1">Internal Call</td></tr>
    <tr><td align="right" port="i2">External Call</td></tr>
    <tr><td align="right" port="i3">Write Operation</td></tr>
    <tr><td align="right" port="i4">Read Operation</td></tr>
    <tr><td align="right" port="i5">Inheritance</td></tr>
  </table>>]
  key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
    <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
    <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
    <tr><td port="i3">&nbsp;&nbsp;&nbsp;</td></tr>
    <tr><td port="i4">&nbsp;&nbsp;&nbsp;</td></tr>
    <tr><td port="i5">&nbsp;&nbsp;&nbsp;</td></tr>
  </table>>]
  key:i1:e -> key2:i1:w [color="#40e7c8"]
  key:i2:e -> key2:i2:w [color="white"]
  key:i3:e -> key2:i3:w [color="#59A14F"]
  key:i4:e -> key2:i4:w [color="blue"]
  key:i5:e -> key2:i5:w [color="#FF00FF", style="dashed"]
}
}
