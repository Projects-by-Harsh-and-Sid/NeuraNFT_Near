version: '1.0'
services:

  near_neuranft_frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - CONTRACT_NAME=neuranft.testnet
        - NEAR_NETWORK=testnet
        - NEAR_BACKEND_URL=https://near.backend.neuranft.com
        - BACKEND_URL=https://near.backend.neuranft.com
    ports:
      - "6021:80"
    volumes:
      - ./frontend/.logs:/var/log/nginx
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: ["nginx", "-g", "daemon off;"]

    networks:
      - near_neuranft_network

  near_neuranft_backend:
    build:
      context: ./master_node  # Build the image from the Dockerfile in ./master_node
    # ports:
    #   - "0.0.0.0:6010:5500"  # Map host port 6010 to container port 5500
    volumes:
      - ./master_node:/app  # Mount the ./master_node folder into the container
      - ./master_node/.logs:/app/.logs  # Mount the .logs folder to persist logs
    command: >
      gunicorn -w 5 -b 0.0.0.0:5500 app:app
      --access-logfile /app/.logs/access.log 
      --error-logfile /app/.logs/error.log
    # command: python app.py
    networks:
      - near_neuranft_network
    environment:
      # - NODE_ENV=development
      - DEFAULT_ENV=0
      # - CHAT_URL=http://host.docker.internal:8000/query
      - CHAT_URL=http://localhost:8000/query
      - HPC_ENDPOINT=https://near.backend.neuranft.com
      - HPC_ENDPOINT_PORT=443
      - FILESTORAGE_ENDPOINT=https://near.backend.neuranft.com
      - NEAR_API_ENDPOINT=http://near_neuranft_near_api_container:3000/api/
      - LOCAL_DATA_ENDPOINT=http://near_neuranft_backend_nginx:80
      - LOCAL_ENV=1

    container_name: near_neuranft_backend_container


  
  near_neuranft_near_api:
    build:
      context: ./node_scripts
      dockerfile: Dockerfile
    # ports:
    #   - "6020:3000"  # Map host port 6010 to container port 5500
    volumes:
      # - ./node_scripts:/app
      - ./node_scripts/.logs:/app/.logs
    environment:
      - NODE_ENV=development # or production
      - PORT=3000
      - NEAR_NETWORK=testnet # or mainnet
      - NEAR_CONTRACT_NAME=neuranft.testnet # neuranft_test1.testnet 

    container_name: near_neuranft_near_api_container
    command: npm run start
    networks:
      - near_neuranft_network


  near_backend_nginx:
    image: nginx:alpine
    ports:
      - "6022:80"
    volumes:
      - ./master_node/nginx_config/nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./master_node/nginx_config/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./master_node/nginx_config/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./master_node/app/uploads/images:/usr/share/nginx/images:ro  # Mount images directory
      - ./master_node/app/uploads/images/default.jpg:/usr/share/nginx/html/default.jpg:ro  # Mount default image
      - ./master_node/.nginx_logs:/var/log/nginx  # Mount nginx logs
    depends_on:
      - near_neuranft_backend
      - near_neuranft_near_api
    networks:
      - near_neuranft_network
    container_name: near_neuranft_backend_nginx
    environment:
      - NEAR_API_ENDPOINT=http://near_neuranft_near_api_container:3000/api/
      - NEAR_HEALTH_CHECK=http://near_neuranft_near_api_container:3000/health
      - BACKEND_ENDPOINT=http://near_neuranft_backend_container:5500

#   ollama:
#     build:
#       context: ./hpc_node
#       dockerfile: Dockerfile
#     deploy:
#       resources:
#         reservations:
#           devices:
#             - driver: nvidia
#               count: all
#               capabilities: [gpu]
#     command: ["serve"]
#     ports:
#       - "11434:11434"
#     volumes:
#       - ./hpc_node/ollama_data:/root/.ollama
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:11434"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     # networks:
#     #   - near_neuranft_network

#   rag_service:
#     build:
#       context: ./hpc_node
#       dockerfile: Dockerfile.rag
#     ports:
#       - "8000:8000"
#     volumes:
#       - ./hpc_node/documents:/app/documents
#     # networks:
#     #   - near_neuranft_network
#     # container_name: near_ollama_rag_service
    

# volumes:
#   ollama_data:


  # goaccess_frontend:
  #   image: allinurl/goaccess:latest
  #   ports:
  #     - "7890:7890"  # Real-time updates port
  #   volumes:
  #     - ./frontend/.logs:/var/log/nginx:ro
  #     - ./frontend/nginx_config/goaccess.conf:/etc/goaccess/goaccess.conf:ro
  #   command: >
  #     goaccess 
  #     --config-file=/etc/goaccess/goaccess.conf
  #     --log-file=/var/log/nginx/access.log
  #     --real-time-html
  #     --port=7890
  #     --ws-url=ws://0.0.0.0:7890
  #     --output=/var/log/nginx/report.html
  #     --real-os
  #     --keep-last=30
  #     --no-global-config
  #     --origin=*
  #     --daemonize
  #   environment:
  #     - GOACCESS_WEBSOCKET_URL=ws://localhost:7890
  #   networks:
  #     - near_neuranft_network
  #   depends_on:
  #     - neuranft_frontend

networks:
  near_neuranft_network:
    driver: bridge







  # goaccess_frontend:
  #   image: allinurl/goaccess:latest
  #   ports:
  #     - "7890:7890"  # Real-time updates port
  #   volumes:
  #     - ./frontend/.logs:/var/log/nginx:ro
  #     - ./frontend/nginx_config/goaccess.conf:/etc/goaccess/goaccess.conf:ro
  #   command: >
  #     goaccess 
  #     --config-file=/etc/goaccess/goaccess.conf
  #     --log-file=/var/log/nginx/access.log
  #     --real-time-html
  #     --port=7890
  #     --ws-url=ws://0.0.0.0:7890
  #     --output=/var/log/nginx/report.html
  #     --real-os
  #     --keep-last=30
  #     --no-global-config
  #     --origin=*
  #     --daemonize
  #   environment:
  #     - GOACCESS_WEBSOCKET_URL=ws://localhost:7890
  #   networks:
  #     - near_neuranft_network
  #   depends_on:
  #     - neuranft_frontend

